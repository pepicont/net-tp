@namespace BlazorWeb.Components.Shared
@using Domain.model
@using Domain.services
@using Domain.validators
@inject UsuarioHttpService UsuarioService
@inject PersonaHttpService PersonaService
@inject AuthServiceScoped AuthServiceScoped
@rendermode InteractiveServer

@if (IsVisible)
{
    <div class="modal fade show d-block" tabindex="-1" role="dialog" style="background-color: rgba(0,0,0,0.5);">
        <div class="modal-dialog modal-lg" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">@(UsuarioActual?.Id > 0 ? "Editar Usuario" : "Nuevo Usuario")</h5>
                    <button type="button" class="btn-close" @onclick="Cerrar" aria-label="Close"></button>
                </div>

                <EditForm Model="UsuarioActual" OnValidSubmit="GuardarUsuario">
                    <div class="modal-body">
                        @if (!string.IsNullOrEmpty(errorMessage))
                        {
                            <div class="alert alert-danger alert-dismissible fade show" role="alert">
                                @errorMessage
                                <button type="button" class="btn-close" @onclick="() => errorMessage = null"></button>
                            </div>
                        }

                        <div class="row">
                            <div class="col-md-6 mb-3">
                                <label class="form-label">Nombre de Usuario <span class="text-danger">*</span></label>
                                <InputText class="form-control" @bind-Value="UsuarioActual.Nombre_usuario" placeholder="Ingrese el nombre de usuario" />
                            </div>
                            <div class="col-md-6 mb-3">
                                <label class="form-label">Email <span class="text-danger">*</span></label>
                                <InputText type="email" class="form-control" @bind-Value="UsuarioActual.Email" placeholder="ejemplo@correo.com" />
                            </div>
                        </div>
                        @if (UsuarioActual!.Id == 0)
                        {
                            <div class="row">
                                <label class="form-label">Clave <span class="text-danger">*</span></label>
                                <InputText type="password" class="form-control" @bind-Value="UsuarioActual.Clave" placeholder="Ingrese su clave" />
                            </div>
                        }

                        <div class="row">
                            
                            <div class="row">
                                <div class="col-md-6 mb-3">
                                    <label class="form-label">Nombre <span class="text-danger">*</span></label>
                                    <InputText class="form-control" @bind-Value="UsuarioActual.Nombre" readonly />
                                </div>
                                <div class="col-md-6 mb-3">
                                    <label class="form-label">Apellido <span class="text-danger">*</span></label>
                                    <InputText class="form-control" @bind-Value="UsuarioActual.Apellido" readonly />
                                </div>
                            </div>
                            <div class="col-md-6 mb-3">
                                <label class="form-label">Legajo de Persona <span class="text-danger">*</span></label>
                                <div class="input-group">
                                    <InputText class="form-control" @bind-Value="legajoInput" placeholder="Ingrese el legajo" />
                                    <button type="button" class="btn btn-outline-primary" @onclick="ValidarLegajo" disabled="@validandoLegajo">
                                        Validar
                                    </button>
                                </div>
                            </div>
                            
                        </div>

                        <div class="row">
                            <div class="col-md-6 mb-3">
                                <label class="form-label">Tipo de Usuario <span class="text-danger">*</span></label>
                                <InputSelect class="form-select" @bind-Value="UsuarioActual.Tipo">
                                    <option value="">Seleccione...</option>
                                    <option value="Admin">Admin</option>
                                    <option value="Usuario">Usuario</option>
                                </InputSelect>
                            </div>
                        </div>

                        <div class="row">
                            <div class="col-md-6 mb-3">
                                <div class="form-check">
                                    <InputCheckbox class="form-check-input" @bind-Value="UsuarioActual.Habilitado" />
                                    <label class="form-check-label ms-2">Habilitado</label>
                                </div>
                            </div>
                            <div class="col-md-6 mb-3">
                                <div class="form-check">
                                    <InputCheckbox class="form-check-input" @bind-Value="UsuarioActual.Cambia_clave" />
                                    <label class="form-check-label ms-2">Cambia clave</label>
                                </div>
                            </div>
                        </div>
                    </div>

                    <div class="modal-footer">
                        <button type="button" class="btn btn-secondary" @onclick="Cerrar" disabled="@guardando">Cancelar</button>
                        <button type="submit" class="btn btn-primary" disabled="@guardando">
                            @if (guardando)
                            {
                                <span class="spinner-border spinner-border-sm me-2" role="status"></span>
                            }
                            @(UsuarioActual?.Id > 0 ? "Guardar Cambios" : "Crear Usuario")
                        </button>
                    </div>
                </EditForm>
            </div>
        </div>
    </div>
}

@code {
    [Parameter] public bool IsVisible { get; set; }
    [Parameter] public Usuario? UsuarioActual { get; set; }
    [Parameter] public EventCallback OnGuardado { get; set; }
    [Parameter] public EventCallback OnCerrar { get; set; }

    private bool guardando = false;
    private bool cargandoPersonas = false;
    private string? errorMessage = null;
    private List<Persona> personas = new();



    private async Task GuardarUsuario()
    {
		errorMessage = UsuarioValidator.Validate(UsuarioActual);
		if (errorMessage != null)
			return;

        try
        {
            guardando = true;
            errorMessage = null;

            if (UsuarioActual!.Id > 0)
                await UsuarioService.UpdateAsync(UsuarioActual);
            else
                await UsuarioService.CreateAsync(UsuarioActual);

            await OnGuardado.InvokeAsync();
            await Cerrar();
        }
        catch (HttpRequestException ex)
        {
            errorMessage = "Error de conexión. Verifica que el servidor esté disponible.";
            Console.WriteLine($"Error HTTP: {ex.Message}");
        }
        catch (Exception ex)
        {
            errorMessage = $"Error al guardar el usuario: {ex.Message}";
            Console.WriteLine($"Error: {ex.Message}");
        }
        finally
        {
            guardando = false;
        }
    }

    private async Task Cerrar()
    {
        errorMessage = null;
        await OnCerrar.InvokeAsync();
    }
    private string legajoInput = "";
    private bool validandoLegajo = false;

    private async Task ValidarLegajo()
    {
        errorMessage = null;
        validandoLegajo = true;
        try
        {
            if (string.IsNullOrWhiteSpace(legajoInput))
            {
                errorMessage = "Debe ingresar un legajo.";
                return;
            }

            if (!int.TryParse(legajoInput, out int legajo))
            {
                errorMessage = "El legajo debe ser un número.";
                return;
            }

            var persona = await PersonaService.GetByIdAsync(legajo);
            if (persona == null)
            {
                errorMessage = "No se encontró una persona con ese legajo.";
                UsuarioActual.Nombre = "";
                UsuarioActual.Apellido = "";
            }
            else
            {
                UsuarioActual.Id_persona = persona.Id;
                UsuarioActual.Nombre = persona.Nombre;
                UsuarioActual.Apellido = persona.Apellido;
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"No se encontró una persona con ese legajo.";
        }
        finally
        {
            validandoLegajo = false;
        }
    }
}
