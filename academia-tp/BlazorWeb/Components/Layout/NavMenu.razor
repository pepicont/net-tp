@using Domain.services
@inject AuthServiceScoped AuthServiceScoped
@inject NavigationManager NavigationManager
@rendermode InteractiveServer
@implements IDisposable



@if (AuthServiceScoped.Usuario?.Tipo == "Admin")
{
	<input type="checkbox" title="Navigation menu" class="navbar-toggler" />

	<div class="nav-scrollable" onclick="document.querySelector('.navbar-toggler').click()">
		<nav class="flex-column">
			<div class="top-row ps-3 navbar navbar-dark">
				<div class="container-fluid">
					<a class="navbar-brand" href="">Academia</a>
				</div>
			</div>
			@foreach (var item in AdminMenuItems)
			{
				<div class="nav-item px-3">
					<NavLink class="nav-link nav-link-icon" href=@($"admin/{item.Href}") Match="NavLinkMatch.All">
						<span class="@item.Icono" aria-hidden="true"></span> @item.Titulo
					</NavLink>
				</div>
			}
		</nav>
	</div>
}
@if (AuthServiceScoped.Usuario?.Tipo == "Usuario")
{
	<input type="checkbox" title="Navigation menu" class="navbar-toggler" />

	<div class="nav-scrollable" onclick="document.querySelector('.navbar-toggler').click()">
		<nav class="flex-column">
			<div class="top-row ps-3 navbar navbar-dark">
				<div class="container-fluid">
					<a class="navbar-brand" href="">Academia</a>
				</div>
			</div>
			@foreach (var item in AdminMenuItems)
			{
				<div class="nav-item px-3">
					<NavLink class="nav-link nav-link-icon" href=@($"usuario/{item.Href}") Match="NavLinkMatch.All">
						<span class="@item.Icono" aria-hidden="true"></span> @item.Titulo
					</NavLink>
				</div>
			}
		</nav>
	</div>
}

@code {
	protected override void OnInitialized()
	{
		// Suscribirse al evento de cambio de estado
		AuthServiceScoped.OnChange += StateHasChanged;
		NavigationManager.LocationChanged += OnLocationChanged;
	}

	private void OnLocationChanged(object? sender, LocationChangedEventArgs e)
	{
		// Fuerza al componente a re-evaluar los @if y los NavLinks
		InvokeAsync(StateHasChanged); //el InvokeAsync usarlo siempre que haya eventos externos que cambien el UI
		//se hace para que lo capture el hilo correcto, el dispatch del UI
	}

	public void Dispose()
	{
		// Desuscribirse del evento al destruir el componente
		AuthServiceScoped.OnChange -= StateHasChanged;
		NavigationManager.LocationChanged -= OnLocationChanged;
	}

	private List<MenuItem> AdminMenuItems = new()
	{
		new("Home", "home", "bi-house-door-fill-nav-menu"),
		new("Persona", "persona", "bi-person-vcard-fill"),
		new("Inscripción", "inscripcion", "bi-receipt"),
		new("Usuario", "usuario", "bi-person-circle"),
		new("Plan", "plan", "bi-calendar-event"),
		new("Especialidad", "especialidad", "bi-award"),
		new("Materia", "materia", "bi-journal"),
		// new("Comisión", "comision", "bi-archive"),
		new("Curso", "curso", "bi-chat-dots"),
		// new("Docente", "docente", "bi-person-exclamation")
	};

	public record MenuItem(string Titulo, string Href, string Icono);
}
