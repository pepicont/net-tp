@page "/admin/plan"
@using BlazorWeb.Components.Base
@using BlazorWeb.Components.Shared
@using Domain.model
@inherits ProtectedAdmin
@rendermode RenderModes.ProtectedMode
@inject PlanHttpService PlanService
@inject EspecialidadHttpService EspecialidadService

<div class="d-flex justify-content-between align-items-center mb-3">
    <h3 class="mb-0">Gestión de Planes (Solo Admin)</h3>
    @if (!isLoading)
    {
        <button class="btn btn-primary" type="button" @onclick="AbrirModalNuevo">
            <i class="bi bi-plus-circle"></i> Cargar nueva plan
        </button>
}
</div>

@if (isLoading)
{
    <div class="d-flex justify-content-center align-items-center" style="min-height: 300px;">
        <div class="spinner-border text-primary" role="status" style="width: 3rem; height: 3rem;">
            <span class="visually-hidden">Cargando...</span>
        </div>
    </div>
}

@if ((planes == null || !planes.Any()) && !isLoading)
{
    <div class="alert alert-info" role="alert">
        <i class="bi bi-info-circle-fill"></i>
        No hay planes cargadas en el sistema.
    </div>
}
@if (planes != null && planes.Any() && !isLoading)
{

    <table class="table table-striped table-hover">
        <thead>
            <tr>
                <th>Id</th>
                <th>Descripción</th>
                <th>Especialidad</th>
                <th>Acciones</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var plan in planes)
            {
                <tr>
                    <td>@plan.Id</td>
                    <td>@plan.Desc</td>
                    <td>@ObtenerNombreEspecialidad(plan.Id_especialidad)</td>
                    <td>
                        <button class="btn btn-warning btn-sm me-1" type="button" @onclick="() => EditarPlan(plan)">
                            <i class="bi bi-pencil"></i> Editar
                        </button>
                        <button class="btn btn-danger btn-sm" type="button" @onclick="() => EliminarPlan(plan.Id)">
                            <i class="bi bi-trash"></i> Eliminar
                        </button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

@if (!string.IsNullOrEmpty(infoMessage))
{
    <div class="alert alert-info mt-3">@infoMessage</div>
}


<ModalPlan IsVisible="mostrarModal"
PlanActual="planSeleccionada"
OnGuardado="OnPlanGuardada"
OnCerrar="CerrarModal" />

@code {
    private List<Plan>? planes = new List<Plan>();
    private bool isLoading = true;
    private bool mostrarModal = false;
    private Plan? planSeleccionada = null;
    private List<Especialidad>? especialidades = new List<Especialidad>();
    private string infoMessage;

    protected override async Task OnInitializedAsync()
    {
        base.OnInitialized();
        await CargarPlanes();
        await cargarEspecilidades();
    }

    private async Task CargarPlanes()
    {
        try
        {
            isLoading = true;
            planes = await PlanService.GetAllAsync();
            planes = planes?.OrderBy(e => e.Id).ToList();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error al cargar planes: {ex.Message}");
            planes = new List<Plan>();
        }
        finally
        {
            isLoading = false;
        }
    }

    private void AbrirModalNuevo()
    {
        planSeleccionada = new Plan();
        mostrarModal = true;
    }

    private void EditarPlan(Plan plan)
    {
        planSeleccionada = new Plan
        {
            Id = plan.Id,
            Desc = plan.Desc,
				Id_especialidad = plan.Id_especialidad
        };
        mostrarModal = true;
    }

    private async Task OnPlanGuardada()
    {
        await CargarPlanes();
    }

    private void CerrarModal()
    {
        mostrarModal = false;
        planSeleccionada = null;
    }

    private async Task EliminarPlan(int id)
    {
        try
        {
            infoMessage = null;

            var response = await PlanService.DeleteAsync(id);

            if (response == null)
            {
                infoMessage = "No se pudo eliminar el Plan porque tiene planes asociados.";
            }
            else
            {
                infoMessage = response.Message ?? "Plam eliminada correctamente.";
                await CargarPlanes();
            }
        }
        catch (Exception ex)
        {
            infoMessage = "No se pudo eliminar el Plan porque tiene planes asociados.";
        }
    }

    private async Task cargarEspecilidades()
    {
        try
        {
            especialidades = await EspecialidadService.GetAllAsync();
            especialidades = especialidades?.OrderBy(e => e.Id).ToList();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error al cargar especialidades: {ex.Message}");
        }
    }
    private string ObtenerNombreEspecialidad(int idEspecialidad)
    {
        if (especialidades == null || !especialidades.Any())
            return "-";

        var esp = especialidades.FirstOrDefault(e => e.Id == idEspecialidad);
        return esp != null ? esp.Desc : "Sin especialidad";
    }
}


