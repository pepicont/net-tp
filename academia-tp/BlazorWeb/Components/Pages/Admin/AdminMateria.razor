@page "/admin/materia"
@using BlazorWeb.Components.Base
@using BlazorWeb.Components.Shared
@using Domain.model
@inherits ProtectedAdmin
@rendermode RenderModes.ProtectedMode
@inject MateriaHttpService MateriaService
@inject PlanHttpService PlanService

<div class="d-flex justify-content-between align-items-center mb-3">
    <h3 class="mb-0">Gestión de Materias (Solo Admin)</h3>
    @if (!isLoading)
    {
        <button class="btn btn-primary" type="button" @onclick="AbrirModalNuevo">
            <i class="bi bi-plus-circle"></i> Cargar nueva materia
        </button>
    }
</div>

@if (isLoading)
{
    <div class="d-flex justify-content-center align-items-center" style="min-height: 300px;">
        <div class="spinner-border text-primary" role="status" style="width: 3rem; height: 3rem;">
            <span class="visually-hidden">Cargando...</span>
        </div>
    </div>
}

@if ((materias == null || !materias.Any()) && !isLoading)
{
    <div class="alert alert-info" role="alert">
        <i class="bi bi-info-circle-fill"></i>
        No hay materias cargadas en el sistema.
    </div>
}
@if (materias != null && materias.Any() && !isLoading)
{
    <table class="table table-striped table-hover">
        <thead>
            <tr>
                <th>Id</th>
                <th>Descripción</th>
                <th>Hs Semanales</th>
                <th>Hs Totales</th>
                <th>Plan</th>
                <th>Acciones</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var materia in materias)
            {
                <tr>
                    <td>@materia.Id</td>
                    <td>@materia.Desc</td>
					<td>@materia.Hs_semanales</td>
					<td>@materia.Hs_totales</td>
                    <td>@ObtenerNombrePlan(materia.Id_plan)</td>
                    <td>
                        <button class="btn btn-warning btn-sm me-1" type="button" @onclick="() => EditarMateria(materia)">
                            <i class="bi bi-pencil"></i> Editar
                        </button>
                        <button class="btn btn-danger btn-sm" type="button" @onclick="() => EliminarMateria(materia.Id)">
                            <i class="bi bi-trash"></i> Eliminar
                        </button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}





<ModalMateria IsVisible="mostrarModal"
              MateriaActual="materiaSeleccionada"
              OnGuardado="OnMateriaGuardada"
              OnCerrar="CerrarModal" />

@code {
    private List<Materia>? materias = new List<Materia>();
    private bool isLoading = true;
    private bool mostrarModal = false;
    private Materia? materiaSeleccionada = null;
    private List<Plan>? planes = new List<Plan>();

    protected override async Task OnInitializedAsync()
    {
        base.OnInitialized();
        await CargarMateriaes();
        await cargarPlanes();
    }

    private async Task CargarMateriaes()
    {
        try
        {
            isLoading = true;
            materias = await MateriaService.GetAllAsync();
            materias = materias?.OrderBy(e => e.Id).ToList();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error al cargar materias: {ex.Message}");
            materias = new List<Materia>();
        }
        finally
        {
            isLoading = false;
        }
    }

    private void AbrirModalNuevo()
    {
        materiaSeleccionada = new Materia();
        mostrarModal = true;
    }

    private void EditarMateria(Materia materia)
    {
        materiaSeleccionada = new Materia
        {
            Id = materia.Id,
            Desc = materia.Desc,
			Hs_semanales = materia.Hs_semanales,
            Hs_totales = materia.Hs_totales,
			Id_plan = materia.Id_plan
        };
        mostrarModal = true;
    }

    private async Task OnMateriaGuardada()
    {
        await CargarMateriaes();
    }

    private void CerrarModal()
    {
        mostrarModal = false;
        materiaSeleccionada = null;
    }

    private async Task EliminarMateria(int id)
    {

        try
        {
            await MateriaService.DeleteAsync(id);
            await CargarMateriaes();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error al eliminar materia: {ex.Message}");
        }
    }

    private async Task cargarPlanes()
    {
        try
        {
			planes = await PlanService.GetAllAsync();
            planes = planes?.OrderBy(e => e.Id).ToList();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error al cargar planes: {ex.Message}");
        }
    }

    private string ObtenerNombrePlan(int id)
    {
        if (planes == null || !planes.Any())
            return "-";

        var esp = planes.FirstOrDefault(e => e.Id == id);
        return esp != null ? esp.Desc : "Sin plan";
    }
}


